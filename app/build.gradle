buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'com.github.gfx.ribbonizer:plugin:0.5.0'
        classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
        if (rootProject.hasProperty('jacocoVersion')) {
            classpath "org.jacoco:org.jacoco.core:${rootProject.jacocoVersion}"
        }
    }
}

plugins {
    id 'info.vividcode.android.sdk-manager' version '0.9.0'
}

ext {
    supportLibraryVersion = '25.3.0'
    testRunnerVersion = '0.5'
    espressoVersion = '2.2.2'
}

apply plugin: 'info.vividcode.android.sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.gfx.ribbonizer'
apply plugin: 'jacoco-everywhere'
apply from: '../config/quality.gradle'
apply from: '../config/translations.gradle'

repositories {
    maven {
        url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/'
    }
}

def isCi = "true".equals(System.getenv("CI"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

coveralls.jacocoReportPath = 'build/reports/coverage/google/debug/report.xml'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    dexOptions {
        // Skip pre-dexing when running on a CI or when disabled via -Dpre-dex=false
        preDexLibraries = preDexEnabled && !isCi
    }

    defaultConfig {
        applicationId "water.connectbot"
        versionName "1.9.2+"
        versionCode 19220

        minSdkVersion 9
        targetSdkVersion 23

        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips'
        }

        testApplicationId "water.connectbot.tests"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        if (project.hasProperty('keystorePassword')) {
            release {
                storeFile file(property('keystoreFile'))
                storePassword property('keystorePassword')
                keyAlias property('keystoreAlias')
                keyPassword property('keystorePassword')
            }
        }
    }

    dependencies {
        compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
        compile "com.android.support:support-v4:$supportLibraryVersion"
        compile "com.android.support:appcompat-v7:$supportLibraryVersion"
        compile "com.takisoft.fix:preference-v7:$supportLibraryVersion.0"
        compile "com.android.support:design:$supportLibraryVersion"

        androidTestCompile("com.android.support.test:runner:$testRunnerVersion") {
            exclude module: "support-annotations"
        }
        androidTestCompile("com.android.support.test:rules:$testRunnerVersion") {
            exclude module: "support-annotations"
        }
        androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion") {
            exclude module: "support-annotations"
        }
        androidTestCompile("com.android.support.test.espresso:espresso-intents:$espressoVersion") {
            exclude module: "support-annotations"
        }
        androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
            exclude group: 'com.android.support'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'

            if (project.hasProperty('keystorePassword')) {
                //noinspection GroovyAssignabilityCheck
                signingConfig signingConfigs.release
            }

            return true // this silences Android Studio's groovy inspector
        }

        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled true
        }
    }

    flavorDimensions "license"

    productFlavors {
        // This product flavor uses the Conscrypt library which is open
        // source and licensed under Apache 2.
        oss {
            dimension "license"
            versionNameSuffix "-oss"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }

        // This product flavor uses the Google Play Services library for
        // ProviderInstaller. It uses Conscrypt under-the-hood, but the
        // Google Play Services SDK itself is not open source.
        google {
            dimension "license"
            versionNameSuffix ""
        }
    }

    lintOptions {
        abortOnError false
        lintConfig file('lint.xml')
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
}

// Dependencies must be below the android block to allow productFlavor specific deps.
dependencies {
    compile 'org.connectbot:sshlib:2.2.5-SNAPSHOT'
    googleCompile 'com.google.android.gms:play-services-base:10.0.1'
    ossCompile 'org.conscrypt:conscrypt-android:1.0.0.RC2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile('org.robolectric:robolectric:3.2.2') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

def getGitDescription = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        return null;
    }
}

// Insert the build number into strings.xml
android.applicationVariants.all { variant ->
    variant.mergeResources.doLast{
        ext.env = System.getenv()
        def buildNumber = getGitDescription()
        if (buildNumber != null) {
            File valuesFile = file("${buildDir}/intermediates/res/merged/${variant.dirName}/values/values.xml")
            String content = valuesFile.getText('UTF-8')
            content = content.replaceAll(/\(working copy\)/, buildNumber)
            valuesFile.write(content, 'UTF-8')
        }
    }
}
